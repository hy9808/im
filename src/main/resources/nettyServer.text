
统一使用参数结构
    /**
    * 服务端接受参数
    * type 消息类型 0.连接 1.发送消息 2.接收消息 3.客户端保持心跳 4.异常
    * chatRecord {
    * * @param {Object} msgType 消息类型 0.文字 1.图片,2.视频,
    * * @param {Object} userId 发送的id
    * * @param {Object} recipientId 接收者id
    * * @param {Object} msg 消息
    * * @param {Object} msgid 对应的消息id (读取是需要加入)
    * }
    */

    /**
    * 客户端
    * type 消息类型 0.连接 1.客户端向服务器发送消息(发消息) 2.接收消息 3.客户端保持心跳 4.异常
    * 备注：即: 客户端发送的统一为 1
    * 服务端发送的统一为 2
    * 前后端心跳包发送统一为 3
    * <p>
    * chatRecord {
    * * @param {Object} msgType 消息类型 0.文字 1.图片,2.视频,
    * * @param {Object} userId 发送的id
    * * @param {Object} recipientId 接收者id
    * * @param {Object} msg 消息(如果msgType为1,2此字段为文件路径)
    * * @param {Object} msgid 对应的消息id (读取是需要加入)
    * }
    */


演示js统一方法：
    /**
     * 获取发送出去的消息体
     * @param {Object} type 消息类型     0.连接  1.发送消息  2.接收消息  3.客户端保持心跳
     * @param {Object} msgType 消息类型  0.文字 1.图片,2.视频,
     * @param {Object} userId 发送的id
     * @param {Object} recipientId 接收者id
     * @param {Object} msg 消息
     * @param {Object} msgId 消息id 传null
     * @param {Object} ext 扩展字段 传null
     */
    function getMessage(type, msgType, sysMsgType, userId, recipientId, msg, msgId, ext) {
        return {
            type: type,
            chatRecord: {
                id: msgId,
                userId: userId,
                msgType: msgType,
                recipientId: recipientId,
                sysMsgType: sysMsgType,
                message: msg,
            },
            ext: ext
        };
    }

  进来先看看这个/api/queryByIdCountList接口。获取未读的用户消息,这个主要是刚登录或者重启app时调用

注意：
    服务端所有操作只跟userId有关，头像和用户昵称 需要前端在好友列表匹配

建立连接后第一步：
type选择0与服务端建立连接，并且在对应的userId字段放上自己id
     websocket.send(JSON.stringify(getMessage(0, 0, null, 用户id, null, null, null, null)));

心跳包：
type选择3发送心跳包告知自己处于活动状态,并且在对应的userId字段放上自己id,心跳内容随意 尽量简短
     websocket.send(JSON.stringify(getMessage(3, null, 0, 用户id, null, 心跳内容, null, null)));

发送消息:
type选择1客户端主动给服务端发消息,需要对应的自己的userId与对方的recipientId,然后就是消息内容 对应的msgType填写对应的数字 0.文字 1.图片,2.视频
但是由于媒体文件都是通过http协议发送的所以这里的1,2并没有实际的意义,主要是为了规范。因为聊天记录是需要根据类型来展示内容的
     websocket.send(JSON.stringify(getMessage(1, 0, null, $("#user").val(), $("#recipientId").val(), $("#message").val(), null, null)))

确认消息：
type选择2
    此处有两种情况：接受好友消息或者系统消息，至于为什么要这么做下面看了就会知道了
    1.1确认好友消息
     websocket.send(JSON.stringify(getMessage(2, null, null, 用户id, 对方ID, null, null, null)))

    1.2确认系统消息 很明显sysMsgType就是区分是哪个系统消息的 因为可能有系统消息 订单消息 然后在加一个读取人userId
     websocket.send(JSON.stringify(getMessage(2, null, sysMsgType, 用户id, null, null, null, null)))



这里在主要讲一下服务端返回的type类型1  也就是服务端主动发消息
   这里拿简单的websocket来讲 因为js我只会一点websocket
     websocket.onmessage = function (ev) {
        //接受到服务端消息
             switch (resultMsg.type) {//诺 这里已经拿到了最外层的Type区分  上面说了统一数据结构 既然你客户端发送消息是1 我服务端也是1
                            case 1:
                                // 具体用msgType细分图片和视频
                                if (resultMsg.chatRecord.msgType == 0) {
                                     //文字内容展示

                                } else if (resultMsg.chatRecord.msgType == 1) {
                                     //图片内容展示

                                } else if(resultMsg.chatRecord.msgType == 2){
                                     //视频内容展示
                                }
                                break;
                            case 2:
                                //客户端不需要做什么操作,我写到这里我也有点懵逼。反正2是你们客户端主动发起的我们服务端做处理的 你们并不需要做什么操作接受消息是1
                                break;
                            case 3:
                                //心跳包
                                console.log("心跳检测回复啦");
                                break;
                             case 4: //群聊消息
                             //....
                                break;
                        }
     }


